<?php

namespace Kotchasan;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-01-23 at 10:20:33.
 */
class ArrayToolTest extends \PHPUnit_Framework_TestCase
{
	/**
	 * @var ArrayTool
	 */
	protected $object;

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp()
	{
		$this->object = new ArrayTool;
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown()
	{

	}

	/**
	 * Generated from @assert (array(array('id' => 2, 'value' => 'two'), array('id' => 3, 'value' => 'three'), array('id' => 1, 'value' => 'one'))) [==] array(array('id' => 1, 'value' => 'one'), array('id' => 2, 'value' => 'two'), array('id' => 3, 'value' => 'three')).
	 *
	 * @covers Kotchasan\ArrayTool::sort
	 */
	public function testSort()
	{

		$this->assertEquals(
		array(array('id' => 1, 'value' => 'one'), array('id' => 2, 'value' => 'two'), array('id' => 3, 'value' => 'three')), \Kotchasan\ArrayTool::sort(array(array('id' => 2, 'value' => 'two'), array('id' => 3, 'value' => 'three'), array('id' => 1, 'value' => 'one')))
		);
	}

	/**
	 * Generated from @assert (array('one', 'One', 'two'), 'one') [==] array('one', 'One').
	 *
	 * @covers Kotchasan\ArrayTool::filter
	 */
	public function testFilter()
	{

		$this->assertEquals(
		array('one', 'One'), \Kotchasan\ArrayTool::filter(array('one', 'One', 'two'), 'one')
		);
	}

	/**
	 * Generated from @assert ('|', array('a' => 'A', 'b' => array('b', 'B'), 'c' => array('c' => array('c', 'C')))) [==] "A|b|B|c|C".
	 *
	 * @covers Kotchasan\ArrayTool::toString
	 */
	public function testToString()
	{

		$this->assertEquals(
		"A|b|B|c|C", \Kotchasan\ArrayTool::toString('|', array('a' => 'A', 'b' => array('b', 'B'), 'c' => array('c' => array('c', 'C'))))
		);
	}

	/**
	 * Generated from @assert (array(0, 1, 2, 3, 4, 5), '0,2') [==] array(1, 3, 4, 5).
	 *
	 * @covers Kotchasan\ArrayTool::delete
	 */
	public function testDelete()
	{

		$this->assertEquals(
		array(1, 3, 4, 5), \Kotchasan\ArrayTool::delete(array(0, 1, 2, 3, 4, 5), '0,2')
		);
	}

	/**
	 * Generated from @assert (array(1 => 1, 2 => 2, 3 => 'three'), array(1 => 'one', 2 => 'two')) [==] array(1 => 'one', 2 => 'two', 3 => 'three').
	 *
	 * @covers Kotchasan\ArrayTool::replace
	 */
	public function testReplace()
	{

		$this->assertEquals(
		array(1 => 'one', 2 => 'two', 3 => 'three'), \Kotchasan\ArrayTool::replace(array(1 => 1, 2 => 2, 3 => 'three'), array(1 => 'one', 2 => 'two'))
		);
	}

	/**
	 * Generated from @assert (serialize(array(1, 2, 3))) [==] array(1, 2, 3).
	 *
	 * @covers Kotchasan\ArrayTool::unserialize
	 */
	public function testUnserialize()
	{

		$this->assertEquals(
		array(1, 2, 3), \Kotchasan\ArrayTool::unserialize(serialize(array(1, 2, 3)))
		);
	}

	/**
	 * @covers Kotchasan\ArrayTool::extract
	 * @todo   Implement testExtract().
	 */
	public function testExtract()
	{
		$array = array('key1' => 'value1', 'key2' => 'value2', array('key3' => 'value3', 'key4' => 'value4'));
		\Kotchasan\ArrayTool::extract($array, $key, $value);
		$this->assertEquals($key, array('key1', 'key2', 'key3', 'key4'));
		$this->assertEquals($value, array('value1', 'value2', 'value3', 'value4'));
	}
}