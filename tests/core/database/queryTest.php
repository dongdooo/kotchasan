<?php

namespace Core\Database;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-11-24 at 21:51:50.
 */
class QueryTest extends \PHPUnit_Framework_TestCase
{
	/**
	 * @var Query
	 */
	protected $object;

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp()
	{
		$this->object = new Query;
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown()
	{

	}

	/**
	 * Generated from @assert (array('id', 1), array('id', '=' , 1), array('id', array(1,2,'3'))) [==] "(`id` = 1 AND `id` = 1 AND `id` IN (1, 2, '3'))".
	 *
	 * @covers Core\Database\Query::groupAnd
	 */
	public function testGroupAnd()
	{

		$this->assertEquals(
		"(`id` = 1 AND `id` = 1 AND `id` IN (1, 2, '3'))", $this->object->groupAnd(array('id', 1), array('id', '=', 1), array('id', array(1, 2, '3')))
		);
	}

	/**
	 * Generated from @assert (array('id', 1), array('id', '=' , 1), array('id', array(1,2,'3'))) [==] "(`id` = 1 OR `id` = 1 OR `id` IN (1, 2, '3'))".
	 *
	 * @covers Core\Database\Query::groupOr
	 */
	public function testGroupOr()
	{

		$this->assertEquals(
		"(`id` = 1 OR `id` = 1 OR `id` IN (1, 2, '3'))", $this->object->groupOr(array('id', 1), array('id', '=', 1), array('id', array(1, 2, '3')))
		);
	}

	/**
	 * Generated from @assert (array('update' => '`user`', 'where' => '`id` = 1', 'set' => array('`id` = 1', "`email` = 'admin@localhost'"))) [==] "UPDATE `user` SET `id` = 1, `email` = 'admin@localhost' WHERE `id` = 1".
	 *
	 * @covers Core\Database\Query::makeQuery
	 */
	public function testMakeQuery()
	{

		$this->assertEquals(
		"UPDATE `user` SET `id` = 1, `email` = 'admin@localhost' WHERE `id` = 1", $this->object->makeQuery(array('update' => '`user`', 'where' => '`id` = 1', 'set' => array('`id` = 1', "`email` = 'admin@localhost'")))
		);
	}

	/**
	 * Generated from @assert (array('insert' => 'user', 'values' => array('id' => 1, 'email' => 'admin@localhost'))) [==] "INSERT INTO `user` (`id`, `email`) VALUES (:id, :email)".
	 *
	 * @covers Core\Database\Query::makeQuery
	 */
	public function testMakeQuery2()
	{

		$this->assertEquals(
		"INSERT INTO `user` (`id`, `email`) VALUES (:id, :email)", $this->object->makeQuery(array('insert' => 'user', 'values' => array('id' => 1, 'email' => 'admin@localhost')))
		);
	}

	/**
	 * Generated from @assert (array('select'=>'*', 'from'=>'`user`','where'=>'`id` = 1', 'order' => '`id`', 'start' => 1, 'limit' => 10, 'join' => array(" INNER JOIN ..."))) [==] "SELECT * FROM `user` INNER JOIN ... WHERE `id` = 1 ORDER BY `id` LIMIT 1,10".
	 *
	 * @covers Core\Database\Query::makeQuery
	 */
	public function testMakeQuery3()
	{

		$this->assertEquals(
		"SELECT * FROM `user` INNER JOIN ... WHERE `id` = 1 ORDER BY `id` LIMIT 1,10", $this->object->makeQuery(array('select' => '*', 'from' => '`user`', 'where' => '`id` = 1', 'order' => '`id`', 'start' => 1, 'limit' => 10, 'join' => array(" INNER JOIN ...")))
		);
	}

	/**
	 * Generated from @assert ('user U') [==] "`user` AS U".
	 *
	 * @covers Core\Database\Query::quoteTableName
	 */
	public function testQuoteTableName()
	{

		$this->assertEquals(
		"`user` AS U", $this->object->quoteTableName('user U')
		);
	}

	/**
	 * Generated from @assert ('user as U1') [==] "`user` AS U1".
	 *
	 * @covers Core\Database\Query::quoteTableName
	 */
	public function testQuoteTableName2()
	{

		$this->assertEquals(
		"`user` AS U1", $this->object->quoteTableName('user as U1')
		);
	}

	/**
	 * Generated from @assert ('user username') [==] "`user` AS `username`".
	 *
	 * @covers Core\Database\Query::quoteTableName
	 */
	public function testQuoteTableName3()
	{

		$this->assertEquals(
		"`user` AS `username`", $this->object->quoteTableName('user username')
		);
	}

	/**
	 * Generated from @assert ('user AS username') [==] "`user` AS `username`".
	 *
	 * @covers Core\Database\Query::quoteTableName
	 */
	public function testQuoteTableName4()
	{

		$this->assertEquals(
		"`user` AS `username`", $this->object->quoteTableName('user AS username')
		);
	}

	/**
	 * Generated from @assert ('user') [==] "`user`".
	 *
	 * @covers Core\Database\Query::quoteTableName
	 */
	public function testQuoteTableName5()
	{

		$this->assertEquals(
		"`user`", $this->object->quoteTableName('user')
		);
	}

	/**
	 * Generated from @assert ('user') [==] "user".
	 *
	 * @covers Core\Database\Query::tableWithPrefix
	 */
	public function testTableWithPrefix()
	{

		$this->assertEquals(
		"user", $this->object->tableWithPrefix('user')
		);
	}

	/**
	 * Generated from @assert ('0 as id') [==] "0 AS `id`".
	 *
	 * @covers Core\Database\Query::buildSelect
	 */
	public function testBuildSelect()
	{

		$this->assertEquals(
		"0 AS `id`", $this->object->buildSelect('0 as id')
		);
	}

	/**
	 * Generated from @assert ("'document' as module") [==] "'document' AS `module`".
	 *
	 * @covers Core\Database\Query::buildSelect
	 */
	public function testBuildSelect2()
	{

		$this->assertEquals(
		"'document' AS `module`", $this->object->buildSelect("'document' as module")
		);
	}

	/**
	 * Generated from @assert ('user.id user_id') [==] "`user`.`id` AS `user_id`".
	 *
	 * @covers Core\Database\Query::buildSelect
	 */
	public function testBuildSelect3()
	{

		$this->assertEquals(
		"`user`.`id` AS `user_id`", $this->object->buildSelect('user.id user_id')
		);
	}

	/**
	 * Generated from @assert ('user.id as user_id') [==] "`user`.`id` AS `user_id`".
	 *
	 * @covers Core\Database\Query::buildSelect
	 */
	public function testBuildSelect4()
	{

		$this->assertEquals(
		"`user`.`id` AS `user_id`", $this->object->buildSelect('user.id as user_id')
		);
	}

	/**
	 * Generated from @assert ('U.id') [==] "U.`id`".
	 *
	 * @covers Core\Database\Query::buildSelect
	 */
	public function testBuildSelect5()
	{

		$this->assertEquals(
		"U.`id`", $this->object->buildSelect('U.id')
		);
	}

	/**
	 * Generated from @assert ('V.email invite') [==] "V.`email` AS `invite`".
	 *
	 * @covers Core\Database\Query::buildSelect
	 */
	public function testBuildSelect6()
	{

		$this->assertEquals(
		"V.`email` AS `invite`", $this->object->buildSelect('V.email invite')
		);
	}

	/**
	 * Generated from @assert ("(SELECT `name` FROM `user`) name") [==] "(SELECT `name` FROM `user`) AS `name`".
	 *
	 * @covers Core\Database\Query::buildSelect
	 */
	public function testBuildSelect7()
	{

		$this->assertEquals(
		"(SELECT `name` FROM `user`) AS `name`", $this->object->buildSelect("(SELECT `name` FROM `user`) name")
		);
	}

	/**
	 * Generated from @assert (array('0 id', 'user', 'user.id user_id', "'document' module", '(...) name')) [==] "0 AS `id`, `user`, `user`.`id` AS `user_id`, 'document' AS `module`, (...) AS `name`".
	 *
	 * @covers Core\Database\Query::buildSelect
	 */
	public function testBuildSelect8()
	{

		$this->assertEquals(
		"0 AS `id`, `user`, `user`.`id` AS `user_id`, 'document' AS `module`, (...) AS `name`", $this->object->buildSelect(array('0 id', 'user', 'user.id user_id', "'document' module", '(...) name'))
		);
	}

	/**
	 * Generated from @assert ('user U', 'INNER', 1) [==] " INNER JOIN `user` AS U ON `id`=1".
	 *
	 * @covers Core\Database\Query::buildJoin
	 */
	public function testBuildJoin()
	{

		$this->assertEquals(
		" INNER JOIN `user` AS U ON `id`=1", $this->object->buildJoin('user U', 'INNER', 1)
		);
	}

	/**
	 * Generated from @assert ('user U', 'INNER', array('U.id', 'A.id')) [==] " INNER JOIN `user` AS U ON U.`id`=A.`id`".
	 *
	 * @covers Core\Database\Query::buildJoin
	 */
	public function testBuildJoin2()
	{

		$this->assertEquals(
		" INNER JOIN `user` AS U ON U.`id`=A.`id`", $this->object->buildJoin('user U', 'INNER', array('U.id', 'A.id'))
		);
	}

	/**
	 * Generated from @assert ('user U', 'INNER', array('U.id', '=', 'A.id')) [==] " INNER JOIN `user` AS U ON U.`id`=A.`id`".
	 *
	 * @covers Core\Database\Query::buildJoin
	 */
	public function testBuildJoin3()
	{

		$this->assertEquals(
		" INNER JOIN `user` AS U ON U.`id`=A.`id`", $this->object->buildJoin('user U', 'INNER', array('U.id', '=', 'A.id'))
		);
	}

	/**
	 * Generated from @assert ('user U', 'INNER', array('id', '=', 1)) [==] " INNER JOIN `user` AS U ON `id`=1".
	 *
	 * @covers Core\Database\Query::buildJoin
	 */
	public function testBuildJoin4()
	{

		$this->assertEquals(
		" INNER JOIN `user` AS U ON `id`=1", $this->object->buildJoin('user U', 'INNER', array('id', '=', 1))
		);
	}

	/**
	 * Generated from @assert ('user U', 'INNER', array(array('U.id', 'A.id'), array('U.id', 'A.id'))) [==] " INNER JOIN `user` AS U ON U.`id`=A.`id` AND U.`id`=A.`id`".
	 *
	 * @covers Core\Database\Query::buildJoin
	 */
	public function testBuildJoin5()
	{

		$this->assertEquals(
		" INNER JOIN `user` AS U ON U.`id`=A.`id` AND U.`id`=A.`id`", $this->object->buildJoin('user U', 'INNER', array(array('U.id', 'A.id'), array('U.id', 'A.id')))
		);
	}

	/**
	 * Generated from @assert (array('id', 'id ASC')) [==] "`id`, `id` ASC".
	 *
	 * @covers Core\Database\Query::buildOrder
	 */
	public function testBuildOrder()
	{

		$this->assertEquals(
		"`id`, `id` ASC", $this->object->buildOrder(array('id', 'id ASC'))
		);
	}

	/**
	 * Generated from @assert ('id ASC') [==] "`id` ASC".
	 *
	 * @covers Core\Database\Query::buildOrder
	 */
	public function testBuildOrder2()
	{

		$this->assertEquals(
		"`id` ASC", $this->object->buildOrder('id ASC')
		);
	}

	/**
	 * Generated from @assert ('user.id DESC') [==] "`user`.`id` DESC".
	 *
	 * @covers Core\Database\Query::buildOrder
	 */
	public function testBuildOrder3()
	{

		$this->assertEquals(
		"`user`.`id` DESC", $this->object->buildOrder('user.id DESC')
		);
	}

	/**
	 * Generated from @assert ('U.id DESC') [==] "U.`id` DESC".
	 *
	 * @covers Core\Database\Query::buildOrder
	 */
	public function testBuildOrder4()
	{

		$this->assertEquals(
		"U.`id` DESC", $this->object->buildOrder('U.id DESC')
		);
	}

	/**
	 * Generated from @assert ('id ASCD') [==] "".
	 *
	 * @covers Core\Database\Query::buildOrder
	 */
	public function testBuildOrder5()
	{

		$this->assertEquals(
		"", $this->object->buildOrder('id ASCD')
		);
	}

	/**
	 * Generated from @assert (1) [===] 1.
	 *
	 * @covers Core\Database\Query::fieldName
	 */
	public function testFieldName()
	{

		$this->assertSame(
		1, $this->object->fieldName(1)
		);
	}

	/**
	 * Generated from @assert ("*") [==] "*".
	 *
	 * @covers Core\Database\Query::fieldName
	 */
	public function testFieldName2()
	{

		$this->assertEquals(
		"*", $this->object->fieldName("*")
		);
	}

	/**
	 * Generated from @assert ("field") [==] "`field`".
	 *
	 * @covers Core\Database\Query::fieldName
	 */
	public function testFieldName3()
	{

		$this->assertEquals(
		"`field`", $this->object->fieldName("field")
		);
	}

	/**
	 * Generated from @assert ("table.field") [==] "`table`.`field`".
	 *
	 * @covers Core\Database\Query::fieldName
	 */
	public function testFieldName4()
	{

		$this->assertEquals(
		"`table`.`field`", $this->object->fieldName("table.field")
		);
	}

	/**
	 * Generated from @assert ("table.field alias") [==] "`table`.`field` AS `alias`".
	 *
	 * @covers Core\Database\Query::fieldName
	 */
	public function testFieldName5()
	{

		$this->assertEquals(
		"`table`.`field` AS `alias`", $this->object->fieldName("table.field alias")
		);
	}

	/**
	 * Generated from @assert ("U.id  user_id") [==] "U.`id` AS `user_id`".
	 *
	 * @covers Core\Database\Query::fieldName
	 */
	public function testFieldName6()
	{

		$this->assertEquals(
		"U.`id` AS `user_id`", $this->object->fieldName("U.id  user_id")
		);
	}

	/**
	 * Generated from @assert ("U.id as user_id") [==] "U.`id` AS `user_id`".
	 *
	 * @covers Core\Database\Query::fieldName
	 */
	public function testFieldName7()
	{

		$this->assertEquals(
		"U.`id` AS `user_id`", $this->object->fieldName("U.id as user_id")
		);
	}

	/**
	 * Generated from @assert ("user user_id") [==] "`user` AS `user_id`".
	 *
	 * @covers Core\Database\Query::fieldName
	 */
	public function testFieldName8()
	{

		$this->assertEquals(
		"`user` AS `user_id`", $this->object->fieldName("user user_id")
		);
	}

	/**
	 * Generated from @assert ("(...) pos") [==] "(...) AS `pos`".
	 *
	 * @covers Core\Database\Query::fieldName
	 */
	public function testFieldName9()
	{

		$this->assertEquals(
		"(...) AS `pos`", $this->object->fieldName("(...) pos")
		);
	}

	/**
	 * Generated from @assert ("(...) `pos`") [==] "(...) AS `pos`".
	 *
	 * @covers Core\Database\Query::fieldName
	 */
	public function testFieldName10()
	{

		$this->assertEquals(
		"(...) AS `pos`", $this->object->fieldName("(...) `pos`")
		);
	}

	/**
	 * Generated from @assert ("CONCAT_WS(...) AS `name`") [==] "CONCAT_WS(...) AS `name`".
	 *
	 * @covers Core\Database\Query::fieldName
	 */
	public function testFieldName11()
	{

		$this->assertEquals(
		"CONCAT_WS(...) AS `name`", $this->object->fieldName("CONCAT_WS(...) AS `name`")
		);
	}

	/**
	 * Generated from @assert ("CONCAT_WS(...) name") [==] "CONCAT_WS(...) AS `name`".
	 *
	 * @covers Core\Database\Query::fieldName
	 */
	public function testFieldName12()
	{

		$this->assertEquals(
		"CONCAT_WS(...) AS `name`", $this->object->fieldName("CONCAT_WS(...) name")
		);
	}

	/**
	 * Generated from @assert (array("table.field", "table.field alias")) [==] "`table`.`field`, `table`.`field` AS `alias`".
	 *
	 * @covers Core\Database\Query::fieldName
	 */
	public function testFieldName13()
	{

		$this->assertEquals(
		"`table`.`field`, `table`.`field` AS `alias`", $this->object->fieldName(array("table.field", "table.field alias"))
		);
	}

	/**
	 * Generated from @assert (1) [===] 1.
	 *
	 * @covers Core\Database\Query::fieldValue
	 */
	public function testFieldValue()
	{

		$this->assertSame(
		1, $this->object->fieldValue(1)
		);
	}

	/**
	 * Generated from @assert ("string") [==] "'string'".
	 *
	 * @covers Core\Database\Query::fieldValue
	 */
	public function testFieldValue2()
	{

		$this->assertEquals(
		"'string'", $this->object->fieldValue("string")
		);
	}

	/**
	 * Generated from @assert ("table.field") [==] "`table`.`field`".
	 *
	 * @covers Core\Database\Query::fieldValue
	 */
	public function testFieldValue3()
	{

		$this->assertEquals(
		"`table`.`field`", $this->object->fieldValue("table.field")
		);
	}

	/**
	 * Generated from @assert ("table.field alias") [==] "`table`.`field` AS `alias`".
	 *
	 * @covers Core\Database\Query::fieldValue
	 */
	public function testFieldValue4()
	{

		$this->assertEquals(
		"`table`.`field` AS `alias`", $this->object->fieldValue("table.field alias")
		);
	}

	/**
	 * Generated from @assert ("table.field as alias") [==] "`table`.`field` AS `alias`".
	 *
	 * @covers Core\Database\Query::fieldValue
	 */
	public function testFieldValue5()
	{

		$this->assertEquals(
		"`table`.`field` AS `alias`", $this->object->fieldValue("table.field as alias")
		);
	}

	/**
	 * Generated from @assert (array("table.field", "table.field alias")) [==] "(`table`.`field`, `table`.`field` AS `alias`)".
	 *
	 * @covers Core\Database\Query::fieldValue
	 */
	public function testFieldValue6()
	{

		$this->assertEquals(
		"(`table`.`field`, `table`.`field` AS `alias`)", $this->object->fieldValue(array("table.field", "table.field alias"))
		);
	}

	/**
	 * Generated from @assert (1) [==] 1.
	 *
	 * @covers Core\Database\Query::buildValue
	 */
	public function testBuildValue()
	{

		$this->assertEquals(
		1, $this->object->buildValue(1)
		);
	}

	/**
	 * Generated from @assert ('string') [==] "string".
	 *
	 * @covers Core\Database\Query::buildValue
	 */
	public function testBuildValue2()
	{

		$this->assertEquals(
		"string", $this->object->buildValue('string')
		);
	}

	/**
	 * Generated from @assert (array('table.id', 'table.id')) [==] "`table`.`id` = `table`.`id`".
	 *
	 * @covers Core\Database\Query::buildValue
	 */
	public function testBuildValue3()
	{

		$this->assertEquals(
		"`table`.`id` = `table`.`id`", $this->object->buildValue(array('table.id', 'table.id'))
		);
	}

	/**
	 * Generated from @assert (array('table.id', '=', 'table.id')) [==] "`table`.`id` = `table`.`id`".
	 *
	 * @covers Core\Database\Query::buildValue
	 */
	public function testBuildValue4()
	{

		$this->assertEquals(
		"`table`.`id` = `table`.`id`", $this->object->buildValue(array('table.id', '=', 'table.id'))
		);
	}

	/**
	 * Generated from @assert (array('id', array(1, 2, '3'))) [==] "`id` IN (1, 2, '3')".
	 *
	 * @covers Core\Database\Query::buildValue
	 */
	public function testBuildValue5()
	{

		$this->assertEquals(
		"`id` IN (1, 2, '3')", $this->object->buildValue(array('id', array(1, 2, '3')))
		);
	}

	/**
	 * Generated from @assert (array('id', 'IN', array(1, 2, '3'))) [==] "`id` IN (1, 2, '3')".
	 *
	 * @covers Core\Database\Query::buildValue
	 */
	public function testBuildValue6()
	{

		$this->assertEquals(
		"`id` IN (1, 2, '3')", $this->object->buildValue(array('id', 'IN', array(1, 2, '3')))
		);
	}

	/**
	 * Generated from @assert (array('table.id', '=', 'one')) [==] "`table`.`id` = 'one'".
	 *
	 * @covers Core\Database\Query::buildValue
	 */
	public function testBuildValue7()
	{

		$this->assertEquals(
		"`table`.`id` = 'one'", $this->object->buildValue(array('table.id', '=', 'one'))
		);
	}

	/**
	 * Generated from @assert (array('id', '=', 1)) [==] "`id` = 1".
	 *
	 * @covers Core\Database\Query::buildValue
	 */
	public function testBuildValue8()
	{

		$this->assertEquals(
		"`id` = 1", $this->object->buildValue(array('id', '=', 1))
		);
	}

	/**
	 * Generated from @assert (array('U.id', '=', 1)) [==] "U.`id` = 1".
	 *
	 * @covers Core\Database\Query::buildValue
	 */
	public function testBuildValue9()
	{

		$this->assertEquals(
		"U.`id` = 1", $this->object->buildValue(array('U.id', '=', 1))
		);
	}

	/**
	 * Generated from @assert (array('id', 'IN', array(1, 2, '3'))) [==] "`id` IN (1, 2, '3')".
	 *
	 * @covers Core\Database\Query::buildValue
	 */
	public function testBuildValue10()
	{

		$this->assertEquals(
		"`id` IN (1, 2, '3')", $this->object->buildValue(array('id', 'IN', array(1, 2, '3')))
		);
	}

	/**
	 * Generated from @assert (array('id', '!=', '(...) alias')) [==] "`id` != (...) AS `alias`".
	 *
	 * @covers Core\Database\Query::buildValue
	 */
	public function testBuildValue11()
	{

		$this->assertEquals(
		"`id` != (...) AS `alias`", $this->object->buildValue(array('id', '!=', '(...) alias'))
		);
	}

	/**
	 * Generated from @assert (1) [==] "`id`=1".
	 *
	 * @covers Core\Database\Query::buildWhere
	 */
	public function testBuildWhere()
	{

		$this->assertEquals(
		"`id`=1", $this->object->buildWhere(1)
		);
	}

	/**
	 * Generated from @assert ('string') [==] "string".
	 *
	 * @covers Core\Database\Query::buildWhere
	 */
	public function testBuildWhere2()
	{

		$this->assertEquals(
		"string", $this->object->buildWhere('string')
		);
	}

	/**
	 * Generated from @assert (array('user_id', 1)) [==] "`user_id`=1".
	 *
	 * @covers Core\Database\Query::buildWhere
	 */
	public function testBuildWhere3()
	{

		$this->assertEquals(
		"`user_id`=1", $this->object->buildWhere(array('user_id', 1))
		);
	}

	/**
	 * Generated from @assert (array(array('id', 1), array('id', array(1, 2, '3')))) [==] array("`id`=1 AND `id` IN (:id0, :id1, :id2)", array(':id0' => 1, ':id1' => 2, ':id2' => '3')).
	 *
	 * @covers Core\Database\Query::buildWhere
	 */
	public function testBuildWhere4()
	{

		$this->assertEquals(
		array("`id`=1 AND `id` IN (:id0, :id1, :id2)", array(':id0' => 1, ':id1' => 2, ':id2' => '3')), $this->object->buildWhere(array(array('id', 1), array('id', array(1, 2, '3'))))
		);
	}

	/**
	 * Generated from @assert (array('(...)')) [==] "(...)".
	 *
	 * @covers Core\Database\Query::buildWhere
	 */
	public function testBuildWhere5()
	{

		$this->assertEquals(
		"(...)", $this->object->buildWhere(array('(...)'))
		);
	}

	/**
	 * Generated from @assert (1) [==] array("`id` = :id", array(':id' => 1)).
	 *
	 * @covers Core\Database\Query::buildWhereValues
	 */
	public function testBuildWhereValues()
	{

		$this->assertEquals(
		array("`id` = :id", array(':id' => 1)), $this->object->buildWhereValues(1)
		);
	}

	/**
	 * Generated from @assert ('string') [==] array("string", array()).
	 *
	 * @covers Core\Database\Query::buildWhereValues
	 */
	public function testBuildWhereValues2()
	{

		$this->assertEquals(
		array("string", array()), $this->object->buildWhereValues('string')
		);
	}

	/**
	 * Generated from @assert (array('user_id', 1)) [==] array("`user_id` = :user_id", array(':user_id' => 1)).
	 *
	 * @covers Core\Database\Query::buildWhereValues
	 */
	public function testBuildWhereValues3()
	{

		$this->assertEquals(
		array("`user_id` = :user_id", array(':user_id' => 1)), $this->object->buildWhereValues(array('user_id', 1))
		);
	}

	/**
	 * Generated from @assert (array(array('id', 1), array('id', array(1, 2, '3')))) [==] array("`id` = :id AND `id` IN (:id0,:id1,:id2)", array(':id0' => 1, ':id1' => 2, ':id2' => '3', ':id' => 1)).
	 *
	 * @covers Core\Database\Query::buildWhereValues
	 */
	public function testBuildWhereValues4()
	{

		$this->assertEquals(
		array("`id` = :id AND `id` IN (:id0,:id1,:id2)", array(':id0' => 1, ':id1' => 2, ':id2' => '3', ':id' => 1)), $this->object->buildWhereValues(array(array('id', 1), array('id', array(1, 2, '3'))))
		);
	}

	/**
	 * Generated from @assert (array('(...)')) [==] array('(...)', array()).
	 *
	 * @covers Core\Database\Query::buildWhereValues
	 */
	public function testBuildWhereValues5()
	{

		$this->assertEquals(
		array('(...)', array()), $this->object->buildWhereValues(array('(...)'))
		);
	}

	/**
	 * @covers Core\Database\Query::text
	 * @todo   Implement testText().
	 */
	public function testText()
	{
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
		'This test has not been implemented yet.'
		);
	}
}